import os
import time
import base64
import jwt
import logging
import requests
import asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
ACCESS_KEY = os.getenv("ACCESS_KEY")  # –¢–≤–æ–π Access Key –æ—Ç Kling AI
SECRET_KEY = os.getenv("SECRET_KEY")  # –¢–≤–æ–π Secret Key –æ—Ç Kling AI

API_BASE = "https://api-singapore.klingai.com"

logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    level=logging.INFO
)

user_state = {}

def generate_jwt(ak: str, sk: str) -> str:
    now = int(time.time())
    payload = {
        "iss": ak,
        "exp": now + 1800,
        "nbf": now - 5
    }
    headers = {"alg": "HS256", "typ": "JWT"}
    token = jwt.encode(payload, sk, algorithm="HS256", headers=headers)
    if isinstance(token, bytes):
        token = token.decode("utf-8")
    return token.strip()

def encode_file_to_base64(file_path: str) -> str:
    with open(file_path, "rb") as f:
        return base64.b64encode(f.read()).decode("utf-8")

def create_video_task(image_base64: str, prompt: str, token: str) -> str:
    url = f"{API_BASE}/v1/videos/image2video"
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: —Å Bearer
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # –ï—Å–ª–∏ —Å Bearer –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç 2:
    # headers = {
    #     "Authorization": token,
    #     "Content-Type": "application/json"
    # }
    
    json_data = {
        "model_name": "kling-v1-6",
        "mode": "pro",
        "duration": "5",
        "image": image_base64,
        "prompt": prompt,
        "cfg_scale": 0.5
    }
    resp = requests.post(url, headers=headers, json=json_data, timeout=60)
    if resp.status_code != 200:
        logging.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {resp.status_code} {resp.text}")
        resp.raise_for_status()
    data = resp.json()
    if "data" not in data or "task_id" not in data["data"]:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å task_id –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {resp.text}")
    return data["data"]["task_id"]

def poll_task_status(task_id: str, token: str, timeout: int = 300) -> str | None:
    url = f"{API_BASE}/v1/videos/image2video/{task_id}"
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: —Å Bearer
    headers = {
        "Authorization": f"Bearer {token}"
    }
    # –ï—Å–ª–∏ —Å Bearer –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç 2:
    # headers = {
    #     "Authorization": token
    # }
    
    deadline = time.time() + timeout
    while time.time() < deadline:
        resp = requests.get(url, headers=headers, timeout=30)
        if resp.status_code != 200:
            logging.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –∑–∞–¥–∞—á–∏: {resp.status_code} {resp.text}")
            resp.raise_for_status()
        data = resp.json().get("data", {})
        status = data.get("task_status") or data.get("status")
        if status and status.lower() == "succeed":
            videos = data.get("task_result", {}).get("videos")
            if videos and isinstance(videos, list) and len(videos) > 0:
                return videos[0].get("url")
            return None
        elif status and status.lower() == "failed":
            raise RuntimeError("–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Kling AI")
        time.sleep(5)
    raise TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∞ –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (prompt) ‚Äî —è —Å–æ–∑–¥–∞–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Kling AI."
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)

    file_path = f"temp_{chat_id}.jpg"
    await file.download_to_drive(file_path)

    image_base64 = encode_file_to_base64(file_path)
    os.remove(file_path)

    user_state[chat_id] = {"image_base64": image_base64}
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ (prompt) –¥–ª—è –≤–∏–¥–µ–æ.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = user_state.get(chat_id)

    if not state or "image_base64" not in state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    prompt = update.message.text.strip()
    image_base64 = state["image_base64"]

    await update.message.reply_text("–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.")

    token = generate_jwt(ACCESS_KEY, SECRET_KEY)
    logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω JWT —Ç–æ–∫–µ–Ω: {token}")

    try:
        print(token,'JWT')
        task_id = await asyncio.to_thread(create_video_task, image_base64, prompt, token)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return

    await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞. –ñ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

    async def wait_and_send():
        try:
            video_url = await asyncio.to_thread(poll_task_status, task_id, token)
            if video_url:
                await context.bot.send_video(chat_id, video=video_url, caption="–í–æ—Ç —Ç–≤–æ—ë –≤–∏–¥–µ–æ üé¨")
            else:
                await context.bot.send_message(chat_id, text="–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ, –Ω–æ URL –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –∑–∞–¥–∞—á–∏")
            await context.bot.send_message(chat_id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏: {e}")

    asyncio.create_task(wait_and_send())
    user_state.pop(chat_id, None)

def main():
    if not BOT_TOKEN or not ACCESS_KEY or not SECRET_KEY:
        print("–û—à–∏–±–∫–∞: BOT_TOKEN, ACCESS_KEY –∏ SECRET_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        return
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == "__main__":
    main()

